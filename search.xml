<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[回顾一下2019]]></title>
    <url>%2F2020%2F02%2F09%2F%E5%9B%9E%E9%A1%BE%E4%B8%80%E4%B8%8B2019%2F</url>
    <content type="text"><![CDATA[2019年的目标 首先很惭愧，整整一年时间没有重新写我的blog。 回想2019年，目标很多，一一赘述也比较麻烦，我就挑几个重点来讲吧。 目标-换工作 首先想到的就是，2019年初的时候，我决定一定要换一家公司工作。原因嘛比较简单，上家公司不太景气，降薪取消年终奖之类的。这个目标就结果来说，是很优秀的完成了。在2019年6月份的时候，我进入现在所在的公司。 目标-看书 2019年的这个看书的目标我觉得是很有意思的，需要分2个阶段。阶段1是6月份之前，因为前半年其实一直是在骑驴找马的状态，我依然记得每天上班、下班，非常自觉地翻开各种技术数据，各种面试书籍。当时的我心里只有一个想法，那就是换工作，为了换工作，真的可以没日没夜看书、记笔记、和室友分享看书的收货以及讨论期间遇到的问题，真的是收货非常大。现在回想起来，这段时期我就想一个合格的高三考生，每天为了高考这个明确的目标不断地强化自己，为了得到一个令自己满意的成绩。 后面一个阶段，进入新公司之后，终于感受到互联网行业的压迫感，原来真正的996【不太准确 是这样的一个状态，包括生活状态和工作状态都有了完全不一样的体验。这段时间看的书真的是太少太少了，唯一记得的四五本小说、一本技术类的书籍，仅此而已。说来也是觉得自己十分的懒惰，需要批评一下。 目标-做饭 做饭这个技能，我觉得我一直都有，我小时候就比较喜欢看着父母亲做饭，然后学习如何做饭，虽然没有实际操作过，但是理论知识学习的还是非常到位的。也是由于当时的公司地址里小区非常近，公交车大概半小时的车程，所以就想到每天晚上回家点菜，然后第二天可以带到公司。这个想法在我脑子里停留的时间非常段，大概就半天时间，付诸行动的速度也很快，由于家中厨房里的炊具基本齐全，因此第二天晚上我就开始做饭了。第一顿饭的菜我到现在还记得，是牛排+可乐鸡翅+煎蛋，都是非常简单而且效率非常快的几样菜。吃上自己做的饭，我觉得这是一件非常有成就感的事情。 总结 写这篇杂文之前，其实我心里是有很多话要说的，但是写着写着，又觉得难以言表。那就稍微少写一点吧。我觉得2019年的我还是提升非常大的，不管是从生活上还是从学习上。我想，还是需要对自己有一定的规划，包括有一定的目标，长期目标，短期目标什么的。我越来越觉得，一个每天都能找到事情做的人，一个每天都不觉得无聊，不游手好闲的人，就已经是一个非常优秀的人了。]]></content>
      <categories>
        <category>心路历程</category>
      </categories>
      <tags>
        <tag>心路历程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次FullGc调优]]></title>
    <url>%2F2019%2F03%2F27%2F%E8%AE%B0%E4%B8%80%E6%AC%A1FullGc%E8%B0%83%E4%BC%98%2F</url>
    <content type="text"><![CDATA[起因自从3月25日起频繁收到线上告警短信，内容为线上某应用的两台实例频繁进行FullGC。贴其中一种GC监控图 于是上到生产环境 1ps -ef |grep java 1sudo jstat -gcutil $&#123;pid&#125; 1000 两条命令下去，随机发现实例Old区占用率已然100%，并且从应用重启至今已经发生了3000+次full gc。并且平均3秒会进行一次full gc。很明显是发生了死循环创建对象之类的问题。 查找问题首先重启了一下线上的两台实例(一台一台来，总共就两台)，发现没过多久GC又上来了，看来是必现问题。既然如此只好dump了，于是使用 1sudo jmap -dump:format=b,file=文件名 $&#123;pid&#125; 这里有一个问题，因为我是跳板机进入的生产环境服务器，然而项目是运行在jetty用户下的，因此这里需要将命令更换一下1sudo -u jetty jmap -dump:format=b,file=文件名 $&#123;pid&#125; dump出文件大概4.3个G，下到本地，然后使用 visualVM打开，豁然开朗 可以看到明显是有一个对象数组引用了3174W+的字符串，导致堆内存被塞满，原因很顺利的找到了。 解决于是首先想到的是查看这个应用的发布记录，于是可以查到这两天这个应用有过两次发布，将两次发布合并与之前版本比较发现确实是修改了部分代码。 代码与某一个营销活动相关。于是将GC突然增长的点与该活动发布记录相对比，时间完全吻合。 叫上小伙伴一起review代码，发现代码中有显示的while(true)循环，break条件是分页查询数据库直到数据库查询没有数据。看来肯定是这个条件的问题于是切换到底层SOA，发现查询数据库的分页代码存在严重的逻辑漏洞(还是比较明显的，看来团队测试质量还是需要提高一下)。 因为分页查询的漏洞，导致了数据库查询永远都只查第一页的数据，如果一次查询10K条，那么2次20K，30次30K，无限循环下去。 于是注释代码(保留现场，毕竟不是自己的bug)，发布底层SOA应用，然后重启出问题的应用实例。完美解决]]></content>
      <categories>
        <category>JAVA基础</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring]]></title>
    <url>%2F2018%2F12%2F02%2Fspring%2F</url>
    <content type="text"><![CDATA[测试啦]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[redis基本数据结构-SDS]]></title>
    <url>%2F2018%2F12%2F02%2Fredis%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-SDS%2F</url>
    <content type="text"><![CDATA[redis基本数据结构SDS]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis基础</tag>
        <tag>SDS</tag>
      </tags>
  </entry>
</search>
